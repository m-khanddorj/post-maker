{"version":3,"sources":["images/backgrounds/1.png","images/border.png","components/Inputs.jsx","components/Post.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Inputs","props","handleChange","text","background","download","react_default","a","createElement","Form","Group","Label","Control","onChange","name","as","value","content","font","type","size","x","y","accept","Button","onClick","Post","style","position","overflow","width","height","id","Object","assign","src","img","0","1","top","left","border","margin","marginBottom","zIndex","color","fontSize","className","Oswald","Comfortaa","Lobster","LobsterTwo","Philosopher","App","reader","FileReader","state","_callee","evt","_evt$target","files","statePath","file","regenerator_default","wrap","_context","prev","next","target","split","_this","setState","prevState","defineProperty","objectSpread","onloadend","result","readAsDataURL","stop","node","document","getElementById","htmlToImage","toPng","then","dataUrl","Image","link","href","click","catch","error","console","Container","fluid","Row","Col","sm","components_Inputs","this","components_Post","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cb83fe5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.c2668daa.png\";","module.exports = __webpack_public_path__ + \"static/media/border.a9b90011.png\";","import React from 'react';\nimport {\n  Form, Button,\n} from 'react-bootstrap';\n\nconst Inputs = (props)=>{\n    const {handleChange,text,background,download} = props;\n\n    return(<Form>\n        <h3>Бичвэр</h3>\n        <Form.Group>\n            <Form.Label>\n                Бичвэр:\n            </Form.Label>\n            <Form.Control onChange = {handleChange} name = 'text.content' as=\"textarea\" value = {text.content} />\n\n            <Form.Label>\n                Фонт:\n            <Form.Control onChange = {handleChange} name = 'text.font' as = 'select' value = {text.font}>\n                <option value = 'Oswald' > Oswald </option>\n                <option value = 'Comfortaa' > Comfortaa </option>\n                <option value = 'Lobster' > Lobster </option>\n                <option value = 'LobsterTwo' > Lobster II </option>\n                <option value = 'Philosopher' > Philosopher </option>\n            </Form.Control>\n            </Form.Label>\n\n            <Form.Label>\n                Бичвэрийн хэмжээ:\n            <Form.Control onChange = {handleChange} name = 'text.size' type = 'number' value = {text.size}/>\n            </Form.Label>\n\n            <Form.Label>\n                Бичвэрийн байрлал:\n            </Form.Label>\n            <Form.Group>\n                <Form.Label>x: </Form.Label> \n                <Form.Control onChange = {handleChange} type = 'number' name = 'text.x' value = {text.x}/>\n                <Form.Label>y: </Form.Label> \n                <Form.Control onChange = {handleChange} type = 'number' name = 'text.y' value = {text.y}/>\n            </Form.Group>\n        </Form.Group>\n\n        <h3>Зураг</h3>\n        <Form.Control onChange = {handleChange} type = 'file' accept = '.jpg, .png, .jpeg, .webp' name = 'background.img' />\n\n        <Form.Label>\n            Зургийн байрлал:\n        </Form.Label>\n        <Form.Group>\n            <Form.Label>x: </Form.Label> \n            <Form.Control onChange = {handleChange} type = 'number' name = 'background.x' value = {background.x}/>\n            <Form.Label>y: </Form.Label> \n            <Form.Control onChange = {handleChange} type = 'number' name = 'background.y' value = {background.y}/>\n        </Form.Group>\n\n        <Form.Group>\n            <Form.Label>\n                Зургийн төрөл:\n            </Form.Label>\n            <Form.Control as = 'select' name = 'text.type' onChange = {handleChange}>\n                <option value = '0'>Өргөнд тааруулах</option>\n                <option value = '1'>Уртад тааруулах</option>\n            </Form.Control>\n        </Form.Group>\n\n        <Form.Group>\n            <Button onClick = {download}>\n                Татах\n            </Button>\n        </Form.Group>\n\n    </Form>)\n}\n\nexport default Inputs;","import React from 'react';\nimport border from '../images/border.png';\n\nconst Post = (props)=>{\n    const {background, text} = props;\n\n    // font name to path dictionary\n    const fontDict = {\n        'Oswald':'oswald',\n        'Comfortaa':'comfortaa',\n        'Lobster':'lobster',\n        'LobsterTwo':'lobsterTwo',\n        'Philosopher':'philosopher',\n    };\n    // type dict\n    const typeDict = {\n        0:{\n            width: 800\n        },\n        1:{\n            height: 800\n        }\n    }\n\n    return(<div style = {{position: 'relative',overflow: 'hidden',width:800,height:800}} id = 'post'> \n\n        <img \n            src = {background.img} \n            {...typeDict[text.type]} \n            style = {{\n                position: 'absolute',\n                top: background.y + 'px',\n                left: background.x + 'px',\n\n            }} \n        />\n        <img src = {border} width = '700' style = {{position: 'absolute',margin:50,marginBottom:0}} />\n        <div\n            style = {{\n                zIndex: 99,\n                color: 'white',\n                position: 'absolute',\n                top: text.y + 'px',\n                left: text.x + 'px',\n                fontSize: text.size + 'px',\n            }}\n\n            className = {fontDict[text.font]}\n        >\n        {text.content}\n    </div>\n    </div>)\n}\n\nexport default Post;","import React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n} from 'react-bootstrap';\nimport htmlToImage from 'html-to-image';\n\nimport background from './images/backgrounds/1.png';\nimport Inputs from './components/Inputs';\nimport Post from './components/Post'\nimport './index.css'\n\n\nclass App extends React.Component{\n  reader = new FileReader();\n    \n  state = {\n    // text states\n    text: {\n      content:'',\n      size: 20,\n      font: 'Oswald',\n      x: 0,\n      y: 0,\n      type: '0'\n    },\n    // background states\n    background:{\n      img: background,\n      x: 0,\n      y: 0\n    }\n  }\n\n  handleChange = async(evt)=>{\n    const {name, value,files} = evt.target;\n    const statePath = name.split(\".\")\n\n    await this.setState(prevState => (\n      {\n        [statePath[0]] : {\n          ...prevState[statePath[0]],\n          [statePath[1]]: value\n        }\n      }\n    ))\n    if(name === 'background.img'){\n      let file = files[0];\n\n      this.reader.onloadend = () => {\n        this.setState(prevState =>(\n          {\n            background:{\n              ...prevState.background,\n              file:file,\n              img: this.reader.result,\n            }\n          }\n        ));\n      }\n\n\n      this.reader.readAsDataURL(file)\n    }\n    \n  }\n\n  download = ()=>{\n    var node = document.getElementById('post');\n \n    htmlToImage.toPng(node)\n      .then(function (dataUrl) {\n        var img = new Image();\n        img.src = dataUrl;\n        \n        var link = document.createElement('a');\n        link.download = \"post.png\";\n        link.href = dataUrl;\n        link.click();\n      })\n      .catch(function (error) {\n        console.error('oops, something went wrong!', error);\n      });\n  }\n\n  render(){\n    return(<Container fluid>\n      <Row>\n        <Col sm = {3}>\n          <Inputs \n            text = {this.state.text}\n            background = {this.state.background}\n            handleChange = {this.handleChange}\n            download = {this.download}\n          />\n        </Col>\n        <Col sm = {9}>\n        <Post\n    text = {this.state.text}\n    background = {this.state.background}\n  />\n        </Col>\n      </Row>\n    </Container>\n    )\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}