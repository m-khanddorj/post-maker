{"version":3,"sources":["images/backgrounds/1.png","images/border.png","components/Inputs.jsx","components/Post.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Inputs","props","handleChange","text","background","download","react_default","a","createElement","Form","Group","Label","Control","onChange","name","as","value","content","font","type","size","color","backgroundColor","backgroundOpacity","min","max","x","y","accept","Button","onClick","Post","style","position","overflow","width","height","display","id","Object","assign","src","img","0","1","top","left","alt","border","margin","marginBottom","zIndex","fontSize","whiteSpace","padding","parseInt","toString","className","Oswald","Comfortaa","Lobster","LobsterTwo","Philosopher","App","reader","FileReader","state","_callee","evt","_evt$target","files","statePath","file","regenerator_default","wrap","_context","prev","next","target","split","_this","setState","prevState","defineProperty","objectSpread","onloadend","result","readAsDataURL","stop","node","document","querySelector","html2canvas","scale","then","canvas","w","window","open","removeAttribute","body","appendChild","catch","error","console","Container","fluid","Row","Col","components_Inputs","this","bottom","components_Post","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.853c8bb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.c2668daa.png\";","module.exports = __webpack_public_path__ + \"static/media/border.a9b90011.png\";","import React from 'react';\nimport {\n  Form, Button,\n} from 'react-bootstrap';\n\nconst Inputs = (props)=>{\n    const {handleChange,text,background,download} = props;\n\n    return(<Form>\n        <h3>Бичвэр</h3>\n        <Form.Group>\n            <Form.Label>\n                Бичвэр:\n            </Form.Label>\n            <Form.Control onChange = {handleChange} name = 'text.content' as=\"textarea\" value = {text.content} />\n\n            <Form.Label>\n                Фонт:\n            <Form.Control onChange = {handleChange} name = 'text.font' as = 'select' value = {text.font}>\n                <option value = 'Oswald' > Oswald </option>\n                <option value = 'Comfortaa' > Comfortaa </option>\n                <option value = 'Lobster' > Lobster </option>\n                <option value = 'LobsterTwo' > Lobster II </option>\n                <option value = 'Philosopher' > Philosopher </option>\n            </Form.Control>\n            </Form.Label>\n\n            <Form.Label>\n                Бичвэрийн хэмжээ:\n                <Form.Control onChange = {handleChange} name = 'text.size' type = 'number' value = {text.size}/>\n            </Form.Label>\n\n            <Form.Label>\n                Бичвэрийн өнгө:\n                <Form.Control onChange = {handleChange} name = 'text.color' type = 'color' value = {text.color}/>\n            </Form.Label>\n\n            <Form.Label>\n                Суурь өнгө:\n                <Form.Control onChange = {handleChange} name = 'text.backgroundColor' type = 'color' value = {text.backgroundColor}/>\n            </Form.Label>\n\n            <Form.Label>\n                Суурь үзэгдэц:\n                <Form.Control \n                    onChange = {handleChange} \n                    name = 'text.backgroundOpacity' \n                    type = 'number' \n                    value = {text.backgroundOpacity}\n                    min = {0}\n                    max = {255}\n                />\n            </Form.Label>\n\n            <br/>\n            <Form.Label>\n                Бичвэрийн байрлал:\n            </Form.Label>\n            <br/>\n            <Form.Label>x: </Form.Label> \n            <Form.Control onChange = {handleChange} type = 'number' name = 'text.x' value = {text.x}/>\n            <Form.Label>y: </Form.Label> \n            <Form.Control onChange = {handleChange} type = 'number' name = 'text.y' value = {text.y}/>\n        </Form.Group>\n\n        <h3>Зураг</h3>\n        <Form.Control onChange = {handleChange} type = 'file' accept = '.jpg, .png, .jpeg, .webp' name = 'background.img' />\n\n        <Form.Label>\n            Зургийн байрлал:\n        </Form.Label>\n        <Form.Group>\n            <Form.Label>x: </Form.Label> \n            <Form.Control onChange = {handleChange} type = 'number' name = 'background.x' value = {background.x}/>\n            <Form.Label>y: </Form.Label> \n            <Form.Control onChange = {handleChange} type = 'number' name = 'background.y' value = {background.y}/>\n        </Form.Group>\n\n        <Form.Group>\n            <Form.Label>\n                Зургийн төрөл:\n            </Form.Label>\n            <Form.Control as = 'select' name = 'text.type' onChange = {handleChange}>\n                <option value = '0'>Өргөнд тааруулах</option>\n                <option value = '1'>Уртад тааруулах</option>\n            </Form.Control>\n        </Form.Group>\n\n        <Form.Group>\n            <Button onClick = {download}>\n                Татах\n            </Button>\n        </Form.Group>\n\n    </Form>)\n}\n\nexport default Inputs;","import React from 'react';\nimport border from '../images/border.png';\n\nconst Post = (props)=>{\n    const {background, text} = props;\n\n    // font name to path dictionary\n    const fontDict = {\n        'Oswald':'oswald',\n        'Comfortaa':'comfortaa',\n        'Lobster':'lobster',\n        'LobsterTwo':'lobsterTwo',\n        'Philosopher':'philosopher',\n    };\n    // type dict\n    const typeDict = {\n        0:{\n            width: 800\n        },\n        1:{\n            height: 800\n        }\n    }\n\n    return(\n            <div style = {{position: 'relative',overflow: 'hidden',width:800,height:800,display: 'inline-block'}} id = 'post' > \n                {/* Background image */}\n                <img \n                    src = {background.img} \n                    {...typeDict[text.type]} \n                    style = {{\n                        position: 'absolute',\n                        top: background.y + 'px',\n                        left: background.x + 'px',\n                    }} \n                    alt = 'Please select a img'\n                />\n                {/* Border */}\n                <img src = {border} width = '700' style = {{position: 'absolute',margin:50,marginBottom:0}} alt = '' />\n                {/* text */}\n                <div\n                    style = {{\n                        zIndex: 99,\n                        color: text.color,\n                        position: 'absolute',\n                        top: text.y + 'px',\n                        left: text.x + 'px',\n                        fontSize: text.size + 'px',\n                        whiteSpace: 'pre-line',\n\n                        padding: '10px',\n                        background: text.backgroundColor + parseInt(text.backgroundOpacity).toString(16),\n                    }}\n\n                    className = {fontDict[text.font]}\n                >\n                {text.content}\n                </div>\n            </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n} from 'react-bootstrap';\n\nimport background from './images/backgrounds/1.png';\nimport Inputs from './components/Inputs';\nimport Post from './components/Post'\nimport './index.css';\nimport html2canvas from 'html2canvas';  \n\n\nclass App extends React.Component{\n  reader = new FileReader();\n    \n  state = {\n    // text states\n    text: {\n      content:'',\n      size: 20,\n      font: 'Oswald',\n      backgroundColor: '#000000',\n      backgroundOpacity: 125,\n      x: 0,\n      y: 0,\n      type: '0',\n      color: '#ffffff'\n    },\n    // background states\n    background:{\n      img: background,\n      x: 0,\n      y: 0\n    }\n  }\n\n  handleChange = async(evt)=>{\n    const {name, value,files} = evt.target;\n    const statePath = name.split(\".\")\n\n    await this.setState(prevState => (\n      {\n        [statePath[0]] : {\n          ...prevState[statePath[0]],\n          [statePath[1]]: value\n        }\n      }\n    ))\n    if(name === 'background.img'){\n      let file = files[0];\n\n      this.reader.onloadend = () => {\n        this.setState(prevState =>(\n          {\n            background:{\n              ...prevState.background,\n              file:file,\n              img: this.reader.result,\n            }\n          }\n        ));\n      }\n\n\n      this.reader.readAsDataURL(file)\n    }\n    \n  }\n\n  download = ()=>{\n\n      var node = document.querySelector('#post');\n      html2canvas(node,{\n        scale: 2\n      })\n      .then(function (canvas) {\n        var w = window.open(\"\");\n        canvas.removeAttribute(\"style\")\n        w.document.body.appendChild(canvas);\n        // const dataUrl = canvas.toDataURL();\n        // var img = new Image();\n        // img.src = dataUrl;\n      })\n      .catch(function (error) {\n        console.error('oops, something went wrong!', error);\n      });\n    }\n  render(){\n    return(<Container fluid>\n      <Row>\n        <Col>\n          <Inputs \n            text = {this.state.text}\n            background = {this.state.background}\n            handleChange = {this.handleChange}\n            download = {this.download}\n          />\n        </Col>\n        <Col>\n          <div className = 'whatever' style = {{position: \"absolute\", bottom:0}}>\n            <Post\n              text = {this.state.text}\n              background = {this.state.background}\n            />\n          </div>\n        </Col>\n      </Row>\n    </Container>\n    )\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}